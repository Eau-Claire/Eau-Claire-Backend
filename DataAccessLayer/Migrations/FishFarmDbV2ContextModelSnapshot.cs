// <auto-generated />
using System;
using FishFarm.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FishFarm.DataAccessLayer.Migrations
{
    [DbContext(typeof(FishFarmDbV2Context))]
    partial class FishFarmDbV2ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FishFarm.BusinessObjects.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.FishBreed", b =>
                {
                    b.Property<int>("BreedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("breed_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BreedId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("BreedId")
                        .HasName("PK__FishBree__9C0214357AA6B114");

                    b.ToTable("FishBreed", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.FishHealthStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("CurrentStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("current_status");

                    b.Property<string>("Prediction")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("prediction");

                    b.Property<int>("TankId")
                        .HasColumnType("int")
                        .HasColumnName("tank_id");

                    b.HasKey("StatusId")
                        .HasName("PK__FishHeal__3683B531FF918ABC");

                    b.HasIndex("TankId");

                    b.ToTable("FishHealthStatus", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.IoTdatum", b =>
                {
                    b.Property<int>("DataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("data_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataId"));

                    b.Property<int>("SensorId")
                        .HasColumnType("int")
                        .HasColumnName("sensor_id");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("DataId")
                        .HasName("PK__IoTData__F5A76B3BFCC0A361");

                    b.HasIndex("SensorId");

                    b.ToTable("IoTData", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842F331018C4");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("PermissionId")
                        .HasName("PK__Permissi__E5331AFAEF5CE317");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.PermissionGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("GroupId")
                        .HasName("PK__Permissi__D57795A0957C8799");

                    b.ToTable("PermissionGroup", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.RoleGroup", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("RoleId")
                        .HasName("PK__RoleGrou__760965CCC2BBB2CB");

                    b.ToTable("RoleGroup", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.Sensor", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sensor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorId"));

                    b.Property<int?>("AssignedToCluster")
                        .HasColumnType("int")
                        .HasColumnName("assigned_to_cluster");

                    b.Property<int?>("AssignedToTank")
                        .HasColumnType("int")
                        .HasColumnName("assigned_to_tank");

                    b.Property<int>("SensorTypeId")
                        .HasColumnType("int")
                        .HasColumnName("sensor_type_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("SensorId")
                        .HasName("PK__Sensor__1A8E90604F446CA7");

                    b.HasIndex("AssignedToCluster");

                    b.HasIndex("AssignedToTank");

                    b.HasIndex("SensorTypeId");

                    b.ToTable("Sensor", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.SensorType", b =>
                {
                    b.Property<int>("SensorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sensor_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("SensorTypeId")
                        .HasName("PK__SensorTy__4797377A9915E540");

                    b.ToTable("SensorType", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.ShopOwner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("OwnerId")
                        .HasName("PK__ShopOwne__3C4FBEE4ABAC2443");

                    b.HasIndex("UserId");

                    b.ToTable("ShopOwner", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.ShopStaff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("permissions");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("StaffId")
                        .HasName("PK__ShopStaf__1963DD9C116A4338");

                    b.HasIndex("UserId");

                    b.ToTable("ShopStaff", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.SpendingRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<string>("AccountNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("account_no");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("BankNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bank_no");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int>("SpendingTypeId")
                        .HasColumnType("int")
                        .HasColumnName("spending_type_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("RecordId")
                        .HasName("PK__Spending__BFCFB4DD2E983C84");

                    b.HasIndex("SpendingTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("SpendingRecord", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.SpendingType", b =>
                {
                    b.Property<int>("SpendingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("spending_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpendingTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("SpendingTypeId")
                        .HasName("PK__Spending__D1CE297F3EEB1E7B");

                    b.ToTable("SpendingType", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.Tank", b =>
                {
                    b.Property<int>("TankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tank_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TankId"));

                    b.Property<int?>("BreedId")
                        .HasColumnType("int")
                        .HasColumnName("breed_id");

                    b.Property<int?>("ClusterId")
                        .HasColumnType("int")
                        .HasColumnName("cluster_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("TankId")
                        .HasName("PK__Tank__2A95910E4DFE4464");

                    b.HasIndex("BreedId");

                    b.HasIndex("ClusterId");

                    b.ToTable("Tank", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.TankCluster", b =>
                {
                    b.Property<int>("ClusterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cluster_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClusterId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("ClusterId")
                        .HasName("PK__TankClus__29FEE76C032E1AAB");

                    b.ToTable("TankCluster", (string)null);
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370F3A6E2E2E");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E61641FB9B525")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__F3DBC572CDF3E26C")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.UserProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contact_address");

                    b.Property<string>("CurrentPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("current_phone_number");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("permanent_address");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ProfileId")
                        .HasName("PK__UserProf__AEBB701F5E13EB90");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.Device", b =>
                {
                    b.HasOne("FishFarm.BusinessObjects.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.FishHealthStatus", b =>
                {
                    b.HasOne("FishFarm.BusinessObjects.Tank", "Tank")
                        .WithMany("FishHealthStatuses")
                        .HasForeignKey("TankId")
                        .IsRequired()
                        .HasConstraintName("FK__FishHealt__tank___5EBF139D");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.IoTdatum", b =>
                {
                    b.HasOne("FishFarm.BusinessObjects.Sensor", "Sensor")
                        .WithMany("IoTdata")
                        .HasForeignKey("SensorId")
                        .IsRequired()
                        .HasConstraintName("FK__IoTData__sensor___5BE2A6F2");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.Notification", b =>
                {
                    b.HasOne("FishFarm.BusinessObjects.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__user___693CA210");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.RefreshToken", b =>
                {
                    b.HasOne("FishFarm.BusinessObjects.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.Sensor", b =>
                {
                    b.HasOne("FishFarm.BusinessObjects.TankCluster", "AssignedToClusterNavigation")
                        .WithMany("Sensors")
                        .HasForeignKey("AssignedToCluster")
                        .HasConstraintName("FK__Sensor__assigned__5812160E");

                    b.HasOne("FishFarm.BusinessObjects.Tank", "AssignedToTankNavigation")
                        .WithMany("Sensors")
                        .HasForeignKey("AssignedToTank")
                        .HasConstraintName("FK__Sensor__assigned__571DF1D5");

                    b.HasOne("FishFarm.BusinessObjects.SensorType", "SensorType")
                        .WithMany("Sensors")
                        .HasForeignKey("SensorTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Sensor__sensor_t__5629CD9C");

                    b.Navigation("AssignedToClusterNavigation");

                    b.Navigation("AssignedToTankNavigation");

                    b.Navigation("SensorType");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.ShopOwner", b =>
                {
                    b.HasOne("FishFarm.BusinessObjects.User", "User")
                        .WithMany("ShopOwners")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ShopOwner__user___3F466844");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.ShopStaff", b =>
                {
                    b.HasOne("FishFarm.BusinessObjects.User", "User")
                        .WithMany("ShopStaffs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ShopStaff__user___4222D4EF");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.SpendingRecord", b =>
                {
                    b.HasOne("FishFarm.BusinessObjects.SpendingType", "SpendingType")
                        .WithMany("SpendingRecords")
                        .HasForeignKey("SpendingTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__SpendingR__spend__66603565");

                    b.HasOne("FishFarm.BusinessObjects.User", "User")
                        .WithMany("SpendingRecords")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__SpendingR__user___656C112C");

                    b.Navigation("SpendingType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.Tank", b =>
                {
                    b.HasOne("FishFarm.BusinessObjects.FishBreed", "Breed")
                        .WithMany("Tanks")
                        .HasForeignKey("BreedId")
                        .HasConstraintName("FK__Tank__breed_id__52593CB8");

                    b.HasOne("FishFarm.BusinessObjects.TankCluster", "Cluster")
                        .WithMany("Tanks")
                        .HasForeignKey("ClusterId")
                        .HasConstraintName("FK__Tank__cluster_id__5165187F");

                    b.Navigation("Breed");

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.UserProfile", b =>
                {
                    b.HasOne("FishFarm.BusinessObjects.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserProfi__user___3C69FB99");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.FishBreed", b =>
                {
                    b.Navigation("Tanks");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.Sensor", b =>
                {
                    b.Navigation("IoTdata");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.SensorType", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.SpendingType", b =>
                {
                    b.Navigation("SpendingRecords");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.Tank", b =>
                {
                    b.Navigation("FishHealthStatuses");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.TankCluster", b =>
                {
                    b.Navigation("Sensors");

                    b.Navigation("Tanks");
                });

            modelBuilder.Entity("FishFarm.BusinessObjects.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("ShopOwners");

                    b.Navigation("ShopStaffs");

                    b.Navigation("SpendingRecords");

                    b.Navigation("UserProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
